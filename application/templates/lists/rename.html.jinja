<input
    required
    class="form-control rename scalename z-3"
    type="text"
    id="input_{{ entry.item_model }}_name-{{ entry.item_id }}"
    name="input_{{ entry.item_model }}_name-{{ entry.item_id }}"
    placeholder="{{ entry.get_item().name }}"
    hx-put="/rename/{{ entry.item_model }}/{{ entry.item_id }}"
    hx-vals='{"placeholder": "{{ entry.get_item().name }}"}'
    hx-trigger="blur, keyup[key=='Enter'] from:window, keyup changed delay:1s from:window, drag from:window"
    hx-swap="outerHTML"
    value="{{ entry.get_item().name }}"
    autofocus
    ontouchstart="this.removeAttribute('readonly'); this.focus();"
/>

<script>
    const input = document.getElementById(
        "input_{{ entry.item_model }}_name-{{ entry.item_id }}",
    );
    let isDragging = false;

    function updateCursorPosition(event) {
        const rect = input.getBoundingClientRect();
        const touchX = event.touches[0].clientX - rect.left;
        let cursorPosition = Math.floor(
            (touchX / rect.width) * input.value.length,
        );
        cursorPosition = Math.max(
            0,
            Math.min(cursorPosition, input.value.length),
        );
        input.setSelectionRange(cursorPosition, cursorPosition);
    }

    input.addEventListener("touchstart", (event) => {
        isDragging = true; // Begin tracking the drag
        // Initial touch position is handled here
        updateCursorPosition(event);
    });

    input.addEventListener("touchmove", (event) => {
        if (isDragging) {
            updateCursorPosition(event); // Update cursor during drag
            event.preventDefault(); // Prevent scrolling during drag
        }
    });

    input.addEventListener("touchend", () => {
        isDragging = false; // Stop tracking the drag
    });
</script>
